---
permalink: /mailhandler.php
---
<?php
// mailhandler.php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use Dotenv\Dotenv;
use Google\Client as GoogleClient;
use Google\Service\Gmail as GoogleGmail;

// --------------------
// Load environment (.env beside this file)
// --------------------
if (class_exists(Dotenv::class)) {
    $dotenv = Dotenv::createImmutable(__DIR__);
    $dotenv->safeLoad();
}

// --------------------
// Only allow POST
// --------------------
if (($_SERVER['REQUEST_METHOD'] ?? '') !== 'POST') {
    header('Location: https://andyfitzgeraldconsulting.com');
    exit;
}

// --------------------
// Config
// --------------------
$to = 'andy@andyfitzgeraldconsulting.com';
$host = $_SERVER['HTTP_HOST'] ?? '';
if ($host === 'dev.andyfitzgeraldconsulting.com') {
    $adminEmail = 'inquiry@dev.andyfitzgeraldconsulting.com';
} elseif ($host === 'www.andyfitzgeraldconsulting.com' || $host === 'andyfitzgeraldconsulting.com') {
    $adminEmail = 'inquiry@andyfitzgeraldconsulting.com';
} else {
    $adminEmail = 'local@andyfitzgeraldconsulting.com';
}

// --------------------
// Input
// --------------------
$name    = isset($_POST['name'])    ? stripslashes(trim((string)$_POST['name']))    : '';
$email   = isset($_POST['email'])   ? stripslashes(trim((string)$_POST['email']))   : '';
$subject = isset($_POST['subject']) ? stripslashes(trim((string)$_POST['subject'])) : '';
$org     = isset($_POST['org'])     ? (string)$_POST['org']                          : '';
$message = isset($_POST['message']) ? (string)$_POST['message']                      : '';

$errors = [];
if ($name === '')    $errors[] = 'Name is empty';
if ($email === '')   $errors[] = 'Email is empty';
elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) $errors[] = 'Email is invalid';
if ($subject === '') $errors[] = 'Subject is empty';
if ($message === '') $errors[] = 'Message is empty';

// Header injection guard
$pattern = '/[\r\n]|Content-Type:|Bcc:|Cc:/i';
if (preg_match($pattern, $name) || preg_match($pattern, $email) || preg_match($pattern, $subject)) {
    http_response_code(400);
    exit('Message not sent: Header injection detected.');
}

// --------------------
// reCAPTCHA v2 verify
// --------------------
$recaptchaSecret = $_ENV['RECAPTCHA_SECRET'] ?? '';
$token = $_POST['g-recaptcha-response'] ?? '';
$remoteIp = $_SERVER['REMOTE_ADDR'] ?? null;

$recaptchaErrors = [];
if ($recaptchaSecret === '') {
    $recaptchaErrors[] = 'Server misconfiguration: reCAPTCHA secret is missing.';
}
if ($token === '') {
    $recaptchaErrors[] = 'reCAPTCHA was not completed. Please check the “I’m not a robot” box and try again.';
}

$response = null;
if (empty($recaptchaErrors)) {
    $ch = curl_init('https://www.google.com/recaptcha/api/siteverify');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
        'secret'   => $recaptchaSecret,
        'response' => $token,
        'remoteip' => $remoteIp,
    ]));
    // Fail fast to avoid 504s
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);

    $verifyResponse = curl_exec($ch);
    $curlErr = curl_error($ch);
    curl_close($ch);

    if ($verifyResponse === false) {
        $recaptchaErrors[] = 'Could not reach Google reCAPTCHA to verify your submission. Please try again.';
        // error_log('reCAPTCHA cURL error: ' . $curlErr);
    } else {
        $response = json_decode($verifyResponse, true);
        if (!is_array($response)) {
            $recaptchaErrors[] = 'Unexpected reCAPTCHA response format. Please try again.';
        }
    }
}

if (empty($recaptchaErrors) && is_array($response)) {
    $success    = $response['success'] ?? false;
    $hostname   = $response['hostname'] ?? '';
    $errorCodes = $response['error-codes'] ?? [];

    if (!$success) {
        $map = [
            'missing-input-secret'   => 'Server misconfiguration: reCAPTCHA secret is missing.',
            'invalid-input-secret'   => 'Server misconfiguration: reCAPTCHA secret is invalid.',
            'missing-input-response' => 'reCAPTCHA was not completed. Please try again.',
            'invalid-input-response' => 'Your reCAPTCHA token expired or was invalid. Please complete the checkbox again.',
            'bad-request'            => 'Bad verification request. Please try again.',
            'timeout-or-duplicate'   => 'Your reCAPTCHA token timed out or was already used. Please submit the form again.',
        ];
        if (!empty($errorCodes)) {
            foreach ($errorCodes as $code) {
                $recaptchaErrors[] = $map[$code] ?? 'reCAPTCHA failed. Please try again.';
            }
        } else {
            $recaptchaErrors[] = 'reCAPTCHA failed. Please try again.';
        }
    } else {
        $expectedHost = $_SERVER['HTTP_HOST'] ?? '';
        if ($hostname && $expectedHost && stripos($hostname, $expectedHost) === false) {
            $recaptchaErrors[] = 'reCAPTCHA hostname mismatch. Please refresh and try again.';
        }
    }
}

if (!empty($recaptchaErrors)) {
    echo "<div style='color:red;'>";
    foreach ($recaptchaErrors as $msg) {
        echo '<p>' . htmlspecialchars($msg, ENT_QUOTES, 'UTF-8') . '</p>';
    }
    echo "</div>";
    exit;
}

// --------------------
// Compose body (HTML)
// --------------------
$body = sprintf(
    'Name: %s<br />Email: %s<br />Organization: %s<br />Message: %s',
    htmlspecialchars($name, ENT_QUOTES, 'UTF-8'),
    htmlspecialchars($email, ENT_QUOTES, 'UTF-8'),
    htmlspecialchars($org, ENT_QUOTES, 'UTF-8'),
    nl2br(htmlspecialchars($message, ENT_QUOTES, 'UTF-8'))
);

// --------------------
// Send via Gmail API (HTTPS/443) — no SMTP
// --------------------
function base64url_encode(string $data): string {
    return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

$fromEmail = $_ENV['GMAIL_FROM'] ?? $adminEmail;
$toEmail   = $to;
$encodedSubject = mb_encode_mimeheader($subject, 'UTF-8');
$alt = strip_tags(str_replace('<br />', "\n", $body));

$boundary = 'b_' . bin2hex(random_bytes(8));
$rawMessage =
    "From: {$fromEmail}\r\n" .
    "To: {$toEmail}\r\n" .
    "Reply-To: " . ($email ?: $fromEmail) . "\r\n" .
    "Subject: {$encodedSubject}\r\n" .
    "MIME-Version: 1.0\r\n" .
    "Content-Type: multipart/alternative; boundary=\"{$boundary}\"\r\n" .
    "\r\n" .
    "--{$boundary}\r\n" .
    "Content-Type: text/plain; charset=UTF-8\r\n" .
    "Content-Transfer-Encoding: 7bit\r\n" .
    "\r\n" .
    "{$alt}\r\n" .
    "\r\n" .
    "--{$boundary}\r\n" .
    "Content-Type: text/html; charset=UTF-8\r\n" .
    "Content-Transfer-Encoding: 7bit\r\n" .
    "\r\n" .
    "{$body}\r\n" .
    "\r\n" .
    "--{$boundary}--\r\n";

// Google client using refresh token from .env
$client = new GoogleClient();
$client->setClientId($_ENV['GOOGLE_CLIENT_ID'] ?? '');
$client->setClientSecret($_ENV['GOOGLE_CLIENT_SECRET'] ?? '');
$client->setAccessType('offline');
$client->setScopes(['https://www.googleapis.com/auth/gmail.send']);

// Exchange refresh token for access token
$refreshToken = $_ENV['GOOGLE_REFRESH_TOKEN'] ?? '';
$client->fetchAccessTokenWithRefreshToken($refreshToken);
$accessToken = $client->getAccessToken();
if (!$accessToken || empty($accessToken['access_token'])) {
    echo "<p style='color:red'>Email send failed: could not obtain Gmail access token.</p>";
    exit;
}

$service = new GoogleGmail($client);

try {
    $gmailMessage = new GoogleGmail\Message(['raw' => base64url_encode($rawMessage)]);
    $service->users_messages->send('me', $gmailMessage);

    if ($host === 'dev.andyfitzgeraldconsulting.com') {
        header('Location: https://dev.andyfitzgeraldconsulting.com/contact-success/');
    } else {
        header('Location: https://andyfitzgeraldconsulting.com/contact-success/');
    }
    exit;
} catch (Throwable $e) {
    $msg = htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8');
    echo "<p style='color:red'>Email send failed via Gmail API: {$msg}</p>";
    exit;
}